{"version":3,"sources":["App.js","Board.js","Screen.js","serviceWorker.js","index.js"],"names":["App","_this","Object","H_git_calculate_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","H_git_calculate_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","H_git_calculate_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","screenscontent","screentext","bind","H_git_calculate_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","sdf","cleanstring","setState","inputstring","out","eval","err","myscreenstring","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_Screen__WEBPACK_IMPORTED_MODULE_8__","myscreen","_Board__WEBPACK_IMPORTED_MODULE_7__","onclickfunc","Component","Board","abc","props","react__WEBPACK_IMPORTED_MODULE_5___default","className","map","nlist","onClick","vikhyat","oplist","explist","clbutton","eqbutton","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Screen","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2pCAKMA,yBAGH,SAAAA,MACA,IAAAC,EAAA,OAAAC,OAAAC,mGAAA,EAAAD,CAAAE,KAAAJ,MAAGC,EAAAC,OAAAG,8GAAA,EAAAH,CAAAE,KAAAF,OAAAI,mGAAA,EAAAJ,CAAAF,KAAAO,KAAAH,QACKI,MAAM,CACPC,eAAe,IAGnBR,EAAKS,WAAWT,EAAKS,WAAWC,KAAhBT,OAAAU,0GAAA,EAAAV,CAAAD,IALnBA,2RAQWY,KAGR,GAAQ,KAALA,IACH,CAEG,IAAIC,YAAY,IAChBV,KAAKW,SAAS,CACDN,eAAeK,mBAK1B,GAAQ,KAALD,IACR,CAEI,IAAIG,YAAaZ,KAAKI,MAAMC,eAI1B,IACI,IAAIQ,IAAIC,KAAKF,aAEjB,MAAMG,KAEKf,KAAKW,SAAS,CACfN,eAAe,kCAM3BL,KAAKW,SAAS,CACFN,eAAeQ,UAI/B,CACE,IAAIG,eAAehB,KAAKI,MAAMC,eAAiBI,IAEjDT,KAAKW,SAAS,CACEN,eAAgBW,mDAWhC,OACKC,2CAAAC,EAAAC,cAAA,WAEGF,2CAAAC,EAAAC,cAACC,qCAAA,EAAD,CAAQC,SAAUrB,KAAKI,MAAMC,iBAC7BY,2CAAAC,EAAAC,cAACG,oCAAA,EAAD,CAAOC,YAAavB,KAAKM,uBApErBkB,8CA2EH5B,+GCpET6B,wLAKSC,GAGJ1B,KAAK2B,MAAMJ,YAAYG,oCAMjC,IAAA7B,EAAAG,KAOI,OACc4B,EAAAV,EAAAC,cAAA,OAAKU,UAAU,YAPd,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAQxBC,IAAI,SAAAC,GAAK,OAAEH,EAAAV,EAAAC,cAAA,UAAQa,QAAS,WAAKnC,EAAKoC,QAAQF,IAASF,UAAU,aAAaE,KAP7F,CAAC,IAAI,IAAI,IAAI,IAAI,KAQDD,IAAI,SAAAI,GAAM,OAAEN,EAAAV,EAAAC,cAAA,UAAQa,QAAS,WAAKnC,EAAKoC,QAAQC,IAAUL,UAAU,YAAYK,KAPhG,CAAC,MAQeJ,IAAI,SAAAK,GAAO,OAAEP,EAAAV,EAAAC,cAAA,UAAQa,QAAS,WAAKnC,EAAKoC,QAAQE,IAAWN,UAAU,aAAaM,KAN9F,CAAC,KAOeL,IAAI,SAAAM,GAAQ,OAAER,EAAAV,EAAAC,cAAA,UAAQa,QAAS,WAAKnC,EAAKoC,QAAQG,IAAYP,UAAU,YAAYO,KARnG,CAAC,KASeN,IAAI,SAAAO,GAAQ,OAAET,EAAAV,EAAAC,cAAA,UAAQa,QAAS,WAAKnC,EAAKoC,QAAQI,IAAYR,UAAU,YAAYQ,aA3BpGb,cAsCLC,oCClDf,IAAAa,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,GAaeG,IATf,SAAgBf,GAEZ,OAAOa,EAAAtB,EAAAC,cAAA,OAAKU,UAAU,eACFW,EAAAtB,EAAAC,cAAA,OAAMU,UAAU,YAAYF,EAAMN,6JCKtCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAhC,EAAAC,cAACvB,EAAA,EAAD,MAASuD,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.76be7db4.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nimport Board from './Board';\nimport Screen from './Screen';\n\nclass App extends Component\n{  \n\n   constructor()\n   {  super()\n      this.state={\n          screenscontent:''\n      }\n\n      this.screentext=this.screentext.bind(this);\n   }\n\n   screentext(sdf)\n   {\n      \n      if(sdf=='C')\n      {\n         //alert(\"its clear\");\n         var cleanstring=\" \";\n         this.setState({\n                      screenscontent:cleanstring\n                    });\n\n\n      }\n      else if(sdf=='=')\n      {\n          \n          var inputstring =this.state.screenscontent;\n          \n          //alert();\n\n            try {\n                var out=eval(inputstring);\n                }\n            catch(err) \n            {\n                       this.setState({\n                      screenscontent:\"you enterd a wrong expression\"\n                                    });\n            }\n\n\n\n          this.setState({\n                      screenscontent:out\n                    });\n      }\n      else\n      {\n        var myscreenstring=this.state.screenscontent + sdf;\n        \n      this.setState({\n                      screenscontent: myscreenstring\n                    });\n      }\n\n\n      //alert(`hello button clicked ${sdf}`);\n      \n\n   }\n   render()\n   {\n      return(\n           <div >\n\n              <Screen myscreen={this.state.screenscontent}/>\n              <Board onclickfunc={this.screentext} />\n              \n           </div>\n        )\n   }\n}\n\nexport default App;\n\n","import React,{Component} from 'react';\r\nimport './mystyle.css';\r\n\r\n\r\n\r\n/*\r\nfunction Board(props)\r\n{\r\n\t    \r\n}\r\n*/\r\n\r\nclass Board extends Component\r\n{\r\n\t \r\n    \r\n    \t\r\n       vikhyat(abc)\r\n       {\r\n       \t   //var lang = ${abc};\r\n           this.props.onclickfunc(abc);\r\n           //alert(abc);            \r\n       }\r\n         \r\n\t render()\r\n       \r\n\t{\r\n        var numlist=['0','1','2','3','4','5','6','7','8','9'];\r\n    \tvar operlist=['+','-','/','*','.'];\r\n    \tvar explist=['<='];\r\n    \tvar equalbutton=['='];\r\n    \tvar clearbutton=['C'];\r\n    \r\n    \treturn(\r\n                   <div className=\"Boardbox\">\r\n                        {numlist.map(nlist=><button onClick={()=>{this.vikhyat(nlist)}} className=\"numbutton\">{nlist}</button>)}\r\n                        {operlist.map(oplist=><button onClick={()=>{this.vikhyat(oplist)}} className=\"opbutton\">{oplist}</button>)}\r\n                        {explist.map(explist=><button onClick={()=>{this.vikhyat(explist)}} className=\"expbutton\">{explist}</button>)}\r\n                        {clearbutton.map(clbutton=><button onClick={()=>{this.vikhyat(clbutton)}} className=\"clbutton\">{clbutton}</button>)}\r\n                        {equalbutton.map(eqbutton=><button onClick={()=>{this.vikhyat(eqbutton)}} className=\"eqbutton\">{eqbutton}</button>)}\r\n                        \r\n\r\n\r\n                   </div>\r\n    \t\t)\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default Board;","import React,{Component} from 'react';\r\nimport './mystyle.css';\r\n\r\n\r\nfunction Screen(props)\r\n{\r\n    return(<div className=\"screenboard\">\r\n                        <div  className=\"myscreen\">{props.myscreen}</div>\r\n                  </div>)\r\n}\r\n\r\n\r\n\r\nexport default Screen;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}